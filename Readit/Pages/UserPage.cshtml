@page
@model Readit.Pages.UserPage
@{
    ViewData["Title"] = "User Profile";
}

@using System.ComponentModel.DataAnnotations
@using System.Reflection

@functions {
    string GetDisplayName(Enum value)
    {
        return value.GetType()
            .GetMember(value.ToString())
            .First()
            .GetCustomAttribute<DisplayAttribute>()?
            .GetName() ?? value.ToString();
    }
}

<div class="container my-4">
    <div class="row mb-4">
        <div class="col-auto">
            <img src="https://via.placeholder.com/100" class="rounded" alt="User avatar" />
        </div>
        <div class="col">
            <h2>@Model.Username</h2>
            <p><strong>11</strong> followers &nbsp; <strong>11</strong> following &nbsp; <strong>@Model.Books.Count</strong> books</p>
        </div>
    </div>

    <h3>Books</h3>
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var book in Model.Books)
        {
            <div class="col">
                <div class="card h-100">
                    <div style="cursor:pointer;" onclick="location.href='@Url.Page("/BookDetails", new { workKey = book.WorkKey.Split('/').Last() })'">
                    @if (book.CoverId.HasValue && book.CoverId > 0)
                        {
                            <img src="https://covers.openlibrary.org/b/id/@(book.CoverId)-M.jpg" class="card-img-top" />
                        }
                        else
                        {
                            <img src="https://via.placeholder.com/150x220?text=No+Cover" class="card-img-top" />
                        }

                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">@book.Authors</p>
                        </div>
                    </div>
                    <button type="button"
                            class="btn btn-danger"
                            onclick='event.stopPropagation(); toggleLibrary(this, {
                                title: "@book.Title",
                            authorName: @Html.Raw(Json.Serialize(book.Authors?.Split(", ").ToList() ?? new List<string>())),
                            coverId: @(book.CoverId ?? 0),
                            key: "@book.WorkKey"
                            })'>
                        Remove
                    </button>
                    <select class="form-select mt-2" onchange="updateStatus(this.value, '@book.WorkKey')">
                        @foreach (Readit.Models.ReadingStatus status in Enum.GetValues(typeof(Readit.Models.ReadingStatus)))
                        {
                            <option value="@status" selected="@(book.Status == status)">
                                @GetDisplayName(status)
                            </option>
                        }
                    </select>

                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        async function toggleLibrary(button, book) {
            const response = await fetch("/Search?handler=Toggle", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(book)
            });

            const result = await response.json();

            if (!result.added) {
                button.closest(".col").remove();
            }
        }
        async function updateStatus(status, key) {
            const response = await fetch('/UserPage?handler=UpdateStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ key, status })
            });

            const result = await response.json();
            if (!result.success) {
                alert("‚ùå Failed to update status.");
            }
        }
    </script>
}
