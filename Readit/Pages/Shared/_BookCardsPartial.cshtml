@using System.ComponentModel.DataAnnotations
@using System.Reflection

@functions {
    string GetDisplayName(Enum value)
    {
        return value.GetType()
            .GetMember(value.ToString())
            .First()
            .GetCustomAttribute<DisplayAttribute>()?.GetName() ?? value.ToString();
    }
}


@model List<Readit.Api.Models.OpenLibraryBook>

@foreach (var book in Model)
{
    <div class="col">
        <div class="card h-100">
            <a href="@Url.Page("/BookDetails", new { workKey = book.Key.Split('/').Last() })" style="text-decoration: none; color: inherit;">
                @if (book.CoverId.HasValue)
                {
                    <img src="https://covers.openlibrary.org/b/id/@(book.CoverId)-L.jpg" class="img-fluid mb-3" />
                }
                else
                {
                    <img src="https://via.placeholder.com/150x220?text=No+Cover" class="card-img-top" alt="No cover" />
                }

                <div class="card-body">
                    <h5 class="card-title">@book.Title</h5>
                    <p class="card-text">@string.Join(", ", book.AuthorName ?? new List<string> { "Unknown" })</p>
                </div>
            </a>

            <button type="button"
                    class="btn @(book.IsInLibrary ? "btn-danger" : "btn-outline-primary")"
                    onclick='event.stopPropagation(); toggleLibrary(this, {
                    title: @Json.Serialize(book.Title),
                    author_name: @Html.Raw(Json.Serialize(book.AuthorName ?? new List<string>())),
                    cover_i: @(book.CoverId ?? 0),
                    key: @Json.Serialize(book.Key)
                })'>
                @(book.IsInLibrary ? "Remove" : "Add to Library")
            </button>
        </div>
    </div>
}
